
- name: install pip requirements
  pip: requirements={{ project_dir }}/requirements.txt

- name: create app dir # todo just make sure this exists
  file: dest={{ project_dir }} owner={{ app_user }} state=directory

- name: install npm requirements
  npm: path={{ project_dir }}

# Rebuild the JS bundle.
- name: run grunt
  shell: grunt chdir={{ project_dir }}

#################################
#################################
# setup app
#################################

- name: start supervisor
  service: name=supervisor state=started

- name: Update local settings
  template: src=settings_local.py.j2
            dest={{ project_dir }}/vegancity/settings_local.py
            owner={{ app_user }}
  notify:
    - restart gunicorn

- name: configure gunicorn supervisor job
  template: src=gunicorn_supervisor.conf.j2 dest=/etc/supervisor/conf.d/vegphilly_gunicorn.conf mode=755
  notify:
    - restart supervisor
    - restart gunicorn


#################################
# nginx
#################################

- name: ensure nginx is at the latest version
  apt: pkg=nginx state=latest

- name: write the nginx site config
  template: src=nginx_vegphilly.conf.j2 dest=/etc/nginx/sites-available/{{ app_name }}
  notify:
    - restart nginx

- name: activate the vegphilly nginx site
  file: state=link src=/etc/nginx/sites-available/{{ app_name }} path=/etc/nginx/sites-enabled/{{ app_name }}
  notify:
    - restart nginx

- name: delete default nginx site config
  file: state=absent path=/etc/nginx/sites-enabled/default
  notify:
    - restart nginx

- name: Ensure nginx is running
  service: name=nginx state=running

#################################
# misc
#################################

- name: run syncdb
  sudo: True
  sudo_user: "{{ app_user }}"
  command: python {{ project_dir }}/manage.py syncdb --noinput

- name: run migrate
  sudo: True
  sudo_user: "{{ app_user }}"
  command: python {{ project_dir }}/manage.py migrate --noinput

- name: run collectstatic
  sudo: True
  sudo_user: "{{ app_user }}"
  command: python {{ project_dir }}/manage.py collectstatic --noinput

- name: setup cronjob
  cron: name="backup db" hour=2 job={{ project_dir }}/utils/db_backup.py user={{ app_user }}
